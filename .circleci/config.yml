# TODO: consider to cache .git folder of the git repository if its increases speed.
version: 2
jobs:
  tests:
    docker:
      - image: b4rtware/morpho-test:python3.8.3-openjdk11-buster
    steps:
      - checkout

      - restore_cache:
          keys:
            - morpho-{{ checksum "poetry.lock" }}

      - run:
          name: Install Poetry
          command: pip install poetry

      - run:
          name: Install Dependencies
          command: poetry install

      - save_cache:
          key: morpho-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

      - persist_to_workspace:
          root: /home/circleci/.cache/pypoetry
          paths:
            - virtualenvs/*

      - run:
          name: Run Unit Tests
          command: |
            mkdir test_results
            poetry run python -m pytest --junitxml=test-results/junit.xml tests/unit

      # - run:
      #     name: Run Integration Tests
      #     command: |
      #       poetry run python -m pytest --junitxml=test-results/junit-integration.xml -s tests/integration

      - run:
          name: Run Coverage
          command: |
            poetry run python -m pytest --cov=morpho tests/unit

      - run:
          name: Send to Codecov
          command: poetry run python -m codecov
          when: on_success

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

      # - run:
      #     name: Send to Telegram
      #     command: poetry run python -m notifier.py

  deploy:
    docker:
      - image: circleci/python:3.8.5-buster
    steps:
        - checkout
        - run:
            name: Publish to PyPi
            command: poetry publish

  generate-requirements:
    machine:
      enabled: true
    steps:
        - checkout
        - add_ssh_keys:
            fingerprints:
              - "cb:8a:29:06:bd:73:48:1c:06:6b:4f:a6:ee:8b:7b:0f"    
        - run:
            name: Commit requirements to GitHub
            command: |
              OLD_CONTENT=$(cat requirements-dev.txt)
              OTHER_CONTENT=$(poetry export -f requirements.txt --without-hashes --dev)
              if [ "$OLD_CONTENT" = "$OTHER_CONTENT" ]; then
                echo "Requirements unchanged."
              else
                echo "Requirements have changed."
                echo "Writing new requirements-dev.txt file..."
                poetry export -f requirements.txt --without-hashes --dev > requirements-dev.txt
                echo "Writing new requirements.txt file..."
                poetry export -f requirements.txt --without-hashes > requirements.txt
                echo "Done."
                echo "Creating commit..."
                git config user.email "34386047+B4rtware@users.noreply.github.com"
                git config user.name "CircleCI Bot"
                git commit -am "chore: rebuild requirements files"
                git push origin master
                echo "Done."
              fi

  build-docs:
    docker:
      - image: circleci/python:3.8.5-buster
    steps:
      - checkout

      - run:
          name: Install enchant
          command: "sudo apt-get install libenchant-dev"

      # - attach_workspace:
      #     at: /

      # - run:
      #     name: Install Poetry
      #     command: pip install poetry

      - restore_cache:
          keys:
            - morpho-{{ checksum "poetry.lock" }}

      - run:
          name: Install Poetry
          command: pip install poetry

      - run:
          name: Install Dependencies
          command: poetry install

      - save_cache:
          key: morpho-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

      - run:
          name: Build Documentation
          command: poetry run sphinx-build -M html ./docs/sphinx ./docs/dist -v

      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - "docs/dist/html"

  deploy-docs:
    machine:
      enabled: true
    steps:
      - attach_workspace:
          at: /home/circleci/project

      - add_ssh_keys:
          fingerprints:
            - "aa:ed:87:a9:e2:8a:ca:4a:6b:67:70:ed:6d:85:33:23"
      - run:
          name: Deploy over ssh via rsync
          command: |
             rsync -avz docs/dist/html/ $SSH_USER@$SSH_HOST:$SSH_PATH

      - run:
          name: Copy files into docker
          command: ssh $SSH_USER@$SSH_HOST "$SSH_COMMAND"

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - tests

      - deploy:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+((b|a)\d+)?/
            branches:
              ignore: /.*/
          requires:
            - tests

      - generate-requirements:
          requires:
            - tests

      - build-docs:
          # filters:
          #   tags:
          #     only: /^v\d+\.\d+\.\d+((b|a)\d+)?/
          #   branches:
          #     ignore: /.*/
          requires:
            - tests

      - deploy-docs:
          # filters:
          #   tags:
          #     only: /^v\d+\.\d+\.\d+((b|a)\d+)?/
          #   branches:
          #     ignore: /.*/
          requires:
            - build-docs

