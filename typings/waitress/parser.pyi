"""
This type stub file was generated by pyright.
"""

import re

"""HTTP Request Parser

This server uses asyncore to accept connections and do initial
processing but threads to do work.
"""
class ParsingError(Exception):
    ...


class TransferEncodingNotImplemented(Exception):
    ...


class HTTPRequestParser(object):
    """A structure that collects the HTTP request.

    Once the stream is completed, the instance is passed to
    a server task constructor.
    """
    completed = ...
    empty = ...
    expect_continue = ...
    headers_finished = ...
    header_plus = ...
    chunked = ...
    content_length = ...
    header_bytes_received = ...
    body_bytes_received = ...
    body_rcv = ...
    version = ...
    error = ...
    connection_close = ...
    def __init__(self, adj):
        """
        adj is an Adjustments object.
        """
        self.headers = ...
        self.adj = ...
    
    def received(self, data):
        """
        Receives the HTTP stream for one request.  Returns the number of
        bytes consumed.  Sets the completed flag once both the header and the
        body have been received.
        """
        ...
    
    def parse_header(self, header_plus):
        """
        Parses the header_plus block of text (the headers plus the
        first line of the request).
        """
        self.first_line = ...
        self.command = ...
        self.version = ...
        self.url_scheme = ...
    
    def get_body_stream(self):
        ...
    
    def close(self):
        ...
    


def split_uri(uri):
    ...

def get_header_lines(header):
    """
    Splits the header into lines, putting multi-line headers together.
    """
    ...

first_line_re = re.compile(b"([^ ]+) " b"((?:[^ :?#]+://[^ ?#/]*(?:[0-9]{1,5})?)?[^ ]+)" b"(( HTTP/([0-9.]+))$|$)")
def crack_first_line(line):
    ...

