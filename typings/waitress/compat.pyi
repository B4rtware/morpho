"""
This type stub file was generated by pyright.
"""

import sys
import types
import platform
import builtins
import socket
from typing import Any, Optional

PY2 = sys.version_info[0] == 2
PY3 = sys.version_info[0] == 3
WIN = platform.system() == "Windows"
if PY3:
    string_types = (str, )
    integer_types = (int, )
    class_types = (type, )
    text_type = str
    binary_type = bytes
    long = int
else:
    string_types = (basestring, )
    integer_types = (int, long)
    class_types = (type, types.ClassType)
    text_type = unicode
    binary_type = str
    long = long
if PY3:
    def unquote_bytes_to_wsgi(bytestring):
        ...
    
else:
    def unquote_bytes_to_wsgi(bytestring):
        ...
    
def text_(s, encoding=..., errors=...):
    """ If ``s`` is an instance of ``binary_type``, return
    ``s.decode(encoding, errors)``, otherwise return ``s``"""
    ...

if PY3:
    def tostr(s):
        ...
    
    def tobytes(s):
        ...
    
else:
    tostr = str
    def tobytes(s):
        ...
    
if PY3:
    exec_ = getattr(builtins, "exec")
    def reraise(tp, value, tb: Optional[Any] = ...):
        ...
    
else:
    def exec_(code, globs: Optional[Any] = ..., locs: Optional[Any] = ...):
        """Execute code in a namespace."""
        ...
    
HAS_IPV6 = socket.has_ipv6
if hasattr(socket, "IPPROTO_IPV6") and hasattr(socket, "IPV6_V6ONLY"):
    IPPROTO_IPV6 = socket.IPPROTO_IPV6
    IPV6_V6ONLY = socket.IPV6_V6ONLY
else:
    ...
def set_nonblocking(fd):
    ...

if PY3:
    ResourceWarning = ResourceWarning
else:
    ResourceWarning = UserWarning
def qualname(cls):
    ...

