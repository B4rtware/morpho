"""
This type stub file was generated by pyright.
"""

from .utilities import logger, queue_logger

rename_headers = { "CONTENT_LENGTH": "CONTENT_LENGTH","CONTENT_TYPE": "CONTENT_TYPE" }
hop_by_hop = frozenset(("connection", "keep-alive", "proxy-authenticate", "proxy-authorization", "te", "trailers", "transfer-encoding", "upgrade"))
class ThreadedTaskDispatcher(object):
    """A Task Dispatcher that creates a thread for each task.
    """
    stop_count = ...
    active_count = ...
    logger = ...
    queue_logger = ...
    def __init__(self):
        self.threads = ...
        self.queue = ...
        self.lock = ...
        self.queue_cv = ...
        self.thread_exit_cv = ...
    
    def start_new_thread(self, target, args):
        ...
    
    def handler_thread(self, thread_no):
        ...
    
    def set_thread_count(self, count):
        ...
    
    def add_task(self, task):
        ...
    
    def shutdown(self, cancel_pending: bool = ..., timeout=...):
        ...
    


class Task(object):
    close_on_finish = ...
    status = ...
    wrote_header = ...
    start_time = ...
    content_length = ...
    content_bytes_written = ...
    logged_write_excess = ...
    logged_write_no_body = ...
    complete = ...
    chunked_response = ...
    logger = ...
    def __init__(self, channel, request):
        self.channel = ...
        self.request = ...
        self.response_headers = ...
        self.version = ...
    
    def service(self):
        ...
    
    @property
    def has_body(self):
        ...
    
    def build_response_header(self):
        self.response_headers = ...
    
    def remove_content_length_header(self):
        self.response_headers = ...
    
    def start(self):
        self.start_time = ...
    
    def finish(self):
        ...
    
    def write(self, data):
        ...
    


class ErrorTask(Task):
    """ An error task produces an error response
    """
    complete = ...
    def execute(self):
        self.status = ...
        self.close_on_finish = ...
        self.content_length = ...
    


class WSGITask(Task):
    """A WSGI task produces a response from a WSGI application.
    """
    environ = ...
    def execute(self):
        ...
    
    def get_environment(self):
        """Returns a WSGI environment."""
        self.environ = ...
    


