"""
This type stub file was generated by pyright.
"""

import collections
import logging
import grpc
from typing import Any, Optional

"""Internal utilities for gRPC Python."""
_LOGGER = logging.getLogger(__name__)
_DONE_CALLBACK_EXCEPTION_LOG_MESSAGE = 'Exception calling connectivity future "done" callback!'
class RpcMethodHandler(collections.namedtuple('_RpcMethodHandler', ('request_streaming', 'response_streaming', 'request_deserializer', 'response_serializer', 'unary_unary', 'unary_stream', 'stream_unary', 'stream_stream')), grpc.RpcMethodHandler):
    ...


class DictionaryGenericHandler(grpc.ServiceRpcHandler):
    def __init__(self, service, method_handlers):
        ...
    
    def service_name(self):
        ...
    
    def service(self, handler_call_details):
        ...
    


class _ChannelReadyFuture(grpc.Future):
    def __init__(self, channel):
        ...
    
    def _block(self, timeout):
        ...
    
    def _update(self, connectivity):
        ...
    
    def cancel(self):
        ...
    
    def cancelled(self):
        ...
    
    def running(self):
        ...
    
    def done(self):
        ...
    
    def result(self, timeout: Optional[Any] = ...):
        ...
    
    def exception(self, timeout: Optional[Any] = ...):
        ...
    
    def traceback(self, timeout: Optional[Any] = ...):
        ...
    
    def add_done_callback(self, fn):
        ...
    
    def start(self):
        ...
    
    def __del__(self):
        ...
    


def channel_ready_future(channel):
    ...

