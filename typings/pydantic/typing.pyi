"""
This type stub file was generated by pyright.
"""

import sys
from typing import AbstractSet, Any, Callable as TypingCallable, Dict, Generator, List, Literal, Mapping, NewType, Optional, Sequence, Set, TYPE_CHECKING, Tuple, Type, Union
from collections.abc import Callable as Callable
from .fields import ModelField

if sys.version_info < (3, 7):
    ...
else:
    AnyCallable = TypingCallable[..., Any]
    NoArgAnyCallable = TypingCallable[[], Any]
if sys.version_info < (3, 8):
    ...
else:
    ...
if TYPE_CHECKING:
    TupleGenerator = Generator[Tuple[str, Any], None, None]
    DictStrAny = Dict[str, Any]
    DictAny = Dict[Any, Any]
    SetStr = Set[str]
    ListStr = List[str]
    IntStr = Union[int, str]
    AbstractSetIntStr = AbstractSet[IntStr]
    DictIntStrAny = Dict[IntStr, Any]
    MappingIntStrAny = Mapping[IntStr, Any]
    CallableGenerator = Generator[AnyCallable, None, None]
    ReprArgs = Sequence[Tuple[Optional[str], Any]]
__all__ = ('ForwardRef', 'Callable', 'AnyCallable', 'NoArgAnyCallable', 'AnyType', 'NoneType', 'display_as_type', 'resolve_annotations', 'is_callable_type', 'is_literal_type', 'literal_values', 'Literal', 'is_new_type', 'new_type_supertype', 'is_classvar', 'update_field_forward_refs', 'TupleGenerator', 'DictStrAny', 'DictAny', 'SetStr', 'ListStr', 'IntStr', 'AbstractSetIntStr', 'DictIntStrAny', 'CallableGenerator', 'ReprArgs', 'CallableGenerator')
AnyType = Type[Any]
NoneType = None.__class__
def display_as_type(v: AnyType) -> str:
    ...

def resolve_annotations(raw_annotations: Dict[str, AnyType], module_name: Optional[str]) -> Dict[str, AnyType]:
    """
    Partially taken from typing.get_type_hints.

    Resolve string or ForwardRef annotations into type objects if possible.
    """
    ...

def is_callable_type(type_: AnyType) -> bool:
    ...

if sys.version_info >= (3, 7):
    def is_literal_type(type_: AnyType) -> bool:
        ...
    
    def literal_values(type_: AnyType) -> Tuple[Any, ...]:
        ...
    
else:
    ...
test_type = NewType('test_type', str)
def is_new_type(type_: AnyType) -> bool:
    """
    Check whether type_ was created using typing.NewType
    """
    ...

def new_type_supertype(type_: AnyType) -> AnyType:
    ...

def _check_classvar(v: AnyType) -> bool:
    ...

def is_classvar(ann_type: AnyType) -> bool:
    ...

def update_field_forward_refs(field: ModelField, globalns: Any, localns: Any) -> None:
    """
    Try to update ForwardRefs on fields based on this ModelField, globalns and localns.
    """
    ...

def get_class(type_: AnyType) -> Union[None, bool, AnyType]:
    """
    Tries to get the class of a Type[T] annotation. Returns True if Type is used
    without brackets. Otherwise returns None.
    """
    ...

