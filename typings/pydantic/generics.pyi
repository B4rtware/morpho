"""
This type stub file was generated by pyright.
"""

from typing import Any, ClassVar, Dict, TYPE_CHECKING, Tuple, Type, TypeVar, Union
from .fields import FieldInfo, ModelField
from .main import BaseModel

GenericModelT = TypeVar('GenericModelT', bound='GenericModel')
TypeVarType = Any
class GenericModel(BaseModel):
    __slots__ = ...
    if TYPE_CHECKING:
        __parameters__: ClassVar[Tuple[TypeVarType, ...]]
        ...
    def __class_getitem__(cls: Type[GenericModelT], params: Union[Type[Any], Tuple[Type[Any], ...]]) -> Type[Any]:
        ...
    
    @classmethod
    def __concrete_name__(cls: Type[Any], params: Tuple[Type[Any], ...]) -> str:
        """
        This method can be overridden to achieve a custom naming scheme for GenericModels
        """
        ...
    


def resolve_type_hint(type_: Any, typevars_map: Dict[Any, Any]) -> Type[Any]:
    ...

def check_parameters_count(cls: Type[GenericModel], parameters: Tuple[Any, ...]) -> None:
    ...

def _build_generic_fields(raw_fields: Dict[str, ModelField], concrete_type_hints: Dict[str, Type[Any]], typevars_map: Dict[TypeVarType, Type[Any]]) -> Dict[str, Tuple[Type[Any], FieldInfo]]:
    ...

def _parameterize_generic_field(field_type: Type[Any], typevars_map: Dict[TypeVarType, Type[Any]]) -> Type[Any]:
    ...

def _is_typevar(v: Any) -> bool:
    ...

