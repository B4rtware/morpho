"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, TYPE_CHECKING, Tuple, TypeVar
from .main import BaseModel
from .typing import AnyCallable

__all__ = ('validate_arguments', )
if TYPE_CHECKING:
    Callable = TypeVar('Callable', bound=AnyCallable)
def validate_arguments(function: Callable) -> Callable:
    """
    Decorator to validate the arguments passed to a function.
    """
    ...

ALT_V_ARGS = 'v__args'
ALT_V_KWARGS = 'v__kwargs'
V_POSITIONAL_ONLY_NAME = 'v__positional_only'
class ValidatedFunction:
    def __init__(self, function: Callable):
        self.raw_function = ...
        self.positional_only_args = ...
        self.v_args_name = ...
        self.v_kwargs_name = ...
    
    def call(self, *args: Any, **kwargs: Any) -> Any:
        ...
    
    def build_values(self, args: Tuple[Any, ...], kwargs: Dict[str, Any]) -> Dict[str, Any]:
        ...
    
    def execute(self, m: BaseModel) -> Any:
        ...
    
    def create_model(self, fields: Dict[str, Any], takes_args: bool, takes_kwargs: bool) -> None:
        class DecoratorBaseModel(BaseModel):
            class Config:
                ...
            
            
        
        
        self.model = ...
    


