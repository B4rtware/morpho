"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Generator, Optional, TYPE_CHECKING, Type, TypeVar, Union
from .main import BaseModel
from .typing import AnyType

if TYPE_CHECKING:
    DataclassT = TypeVar('DataclassT', bound='DataclassType')
    class DataclassType:
        __pydantic_model__: Type[BaseModel]
        __initialised__: bool
        def __init__(self, *args: Any, **kwargs: Any) -> None:
            ...
        
        @classmethod
        def __validate__(cls: Type[DataclassT], v: Any) -> DataclassT:
            ...
        
        def __call__(self: DataclassT, *args: Any, **kwargs: Any) -> DataclassT:
            ...
        
    
    
def _validate_dataclass(cls: Type[DataclassT], v: Any) -> DataclassT:
    ...

def _get_validators(cls: Type[DataclassT]) -> Generator[Any, None, None]:
    ...

def setattr_validate_assignment(self: DataclassType, name: str, value: Any) -> None:
    ...

def _process_class(_cls: AnyType, init: bool, repr: bool, eq: bool, order: bool, unsafe_hash: bool, frozen: bool, config: Optional[Type[Any]]) -> DataclassType:
    ...

def dataclass(_cls: Optional[AnyType] = ..., *, init: bool = ..., repr: bool = ..., eq: bool = ..., order: bool = ..., unsafe_hash: bool = ..., frozen: bool = ..., config: Type[Any] = ...) -> Union[Callable[[AnyType], DataclassType], DataclassType]:
    """
    Like the python standard lib dataclasses but with type validation.

    Arguments are the same as for standard dataclasses, except for validate_assignment which has the same meaning
    as Config.validate_assignment.
    """
    ...

