"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any, Dict, Optional, Union
from .fields import ModelField
from .main import BaseModel

env_file_sentinel = str(object())
class SettingsError(ValueError):
    ...


class BaseSettings(BaseModel):
    """
    Base class for settings, allowing values to be overridden by environment variables.

    This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose),
    Heroku and any 12 factor app design.
    """
    def __init__(__pydantic_self__, _env_file: Union[Path, str, None] = ..., **values: Any) -> None:
        ...
    
    def _build_values(self, init_kwargs: Dict[str, Any], _env_file: Union[Path, str, None] = ...) -> Dict[str, Any]:
        ...
    
    def _build_environ(self, _env_file: Union[Path, str, None] = ...) -> Dict[str, Optional[str]]:
        """
        Build environment variables suitable for passing to the Model.
        """
        ...
    
    class Config:
        env_prefix = ...
        env_file = ...
        validate_all = ...
        extra = ...
        arbitrary_types_allowed = ...
        case_sensitive = ...
        @classmethod
        def prepare_field(cls, field: ModelField) -> None:
            ...
        
    
    
    __config__: Config


def read_env_file(file_path: Path, *, case_sensitive: bool = ...) -> Dict[str, Optional[str]]:
    ...

