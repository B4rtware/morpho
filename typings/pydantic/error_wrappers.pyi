"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Generator, List, Optional, Sequence, TYPE_CHECKING, Tuple, Type, Union
from .utils import Representation
from .main import BaseConfig
from .types import ModelOrDc
from .typing import ReprArgs

if TYPE_CHECKING:
    Loc = Tuple[Union[int, str], ...]
__all__ = ('ErrorWrapper', 'ValidationError')
class ErrorWrapper(Representation):
    __slots__ = ...
    def __init__(self, exc: Exception, loc: Union[str, Loc]) -> None:
        self.exc = ...
    
    def loc_tuple(self) -> Loc:
        ...
    
    def __repr_args__(self) -> ReprArgs:
        ...
    


ErrorList = Union[Sequence[Any], ErrorWrapper]
class ValidationError(Representation, ValueError):
    __slots__ = ...
    def __init__(self, errors: Sequence[ErrorList], model: ModelOrDc) -> None:
        self.raw_errors = ...
        self.model = ...
    
    def errors(self) -> List[Dict[str, Any]]:
        ...
    
    def json(self, *, indent: Union[None, int, str] = ...) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr_args__(self) -> ReprArgs:
        ...
    


def display_errors(errors: List[Dict[str, Any]]) -> str:
    ...

def _display_error_loc(error: Dict[str, Any]) -> str:
    ...

def _display_error_type_and_ctx(error: Dict[str, Any]) -> str:
    ...

def flatten_errors(errors: Sequence[Any], config: Type[BaseConfig], loc: Optional[Loc] = ...) -> Generator[Dict[str, Any], None, None]:
    ...

def error_dict(exc: Exception, config: Type[BaseConfig], loc: Loc) -> Dict[str, Any]:
    ...

def get_exc_type(cls: Type[Exception]) -> str:
    ...

def _get_exc_type(cls: Type[Exception]) -> str:
    ...

