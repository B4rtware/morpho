"""
This type stub file was generated by pyright.
"""

from .winterm import WinTerm
from .win32 import windll
from typing import Any, Optional

"""
This type stub file was generated by pyright.
"""
winterm = None
if windll is not None:
    winterm = WinTerm()
class StreamWrapper(object):
    '''
    Wraps a stream (such as stdout), acting as a transparent proxy for all
    attribute access apart from method 'write()', which is delegated to our
    Converter instance.
    '''
    def __init__(self, wrapped, converter):
        ...
    
    def __getattr__(self, name):
        ...
    
    def __enter__(self, *args, **kwargs):
        ...
    
    def __exit__(self, *args, **kwargs):
        ...
    
    def write(self, text):
        ...
    
    def isatty(self):
        ...
    
    @property
    def closed(self):
        ...
    


class AnsiToWin32(object):
    '''
    Implements a 'write()' method which, on Windows, will strip ANSI character
    sequences from the text, and if outputting to a tty, will convert them into
    win32 function calls.
    '''
    ANSI_CSI_RE = ...
    ANSI_OSC_RE = ...
    def __init__(self, wrapped, convert: Optional[Any] = ..., strip: Optional[Any] = ..., autoreset: bool = ...):
        self.wrapped = ...
        self.autoreset = ...
        self.stream = ...
        self.strip = ...
        self.convert = ...
        self.win32_calls = ...
        self.on_stderr = ...
    
    def should_wrap(self):
        '''
        True if this class is actually needed. If false, then the output
        stream will not be affected, nor will win32 calls be issued, so
        wrapping stdout is not actually required. This will generally be
        False on non-Windows platforms, unless optional functionality like
        autoreset has been requested using kwargs to init()
        '''
        ...
    
    def get_win32_calls(self):
        ...
    
    def write(self, text):
        ...
    
    def reset_all(self):
        ...
    
    def write_and_convert(self, text):
        '''
        Write the given text to our wrapped stream, stripping any ANSI
        sequences from the text, and optionally converting them into win32
        calls.
        '''
        ...
    
    def write_plain_text(self, text, start, end):
        ...
    
    def convert_ansi(self, paramstring, command):
        ...
    
    def extract_params(self, command, paramstring):
        ...
    
    def call_win32(self, command, params):
        ...
    
    def convert_osc(self, text):
        ...
    


