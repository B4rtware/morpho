"""
This type stub file was generated by pyright.
"""

import logging
from connexion.operations.abstract import AbstractOperation
from typing import Any, Optional

logger = logging.getLogger("connexion.operations.swagger2")
class Swagger2Operation(AbstractOperation):
    """
    Exposes a Swagger 2.0 operation under the AbstractOperation interface.
    The primary purpose of this class is to provide the `function()` method
    to the API. A Swagger2Operation is plugged into the API with the provided
    (path, method) pair. It resolves the handler function for this operation
    with the provided resolver, and wraps the handler function with multiple
    decorators that provide security, validation, serialization,
    and deserialization.
    """
    def __init__(self, api, method, path, operation, resolver, app_produces, app_consumes, path_parameters: Optional[Any] = ..., app_security: Optional[Any] = ..., security_definitions: Optional[Any] = ..., definitions: Optional[Any] = ..., parameter_definitions: Optional[Any] = ..., response_definitions: Optional[Any] = ..., validate_responses: bool = ..., strict_validation: bool = ..., randomize_endpoint: Optional[Any] = ..., validator_map: Optional[Any] = ..., pythonic_params: bool = ..., uri_parser_class: Optional[Any] = ..., pass_context_arg_name: Optional[Any] = ...):
        """
        :param api: api that this operation is attached to
        :type api: apis.AbstractAPI
        :param method: HTTP method
        :type method: str
        :param path: relative path to this operation
        :type path: str
        :param operation: swagger operation object
        :type operation: dict
        :param resolver: Callable that maps operationID to a function
        :type resolver: resolver.Resolver
        :param app_produces: list of content types the application can return by default
        :type app_produces: list
        :param app_consumes: list of content types the application consumes by default
        :type app_consumes: list
        :param path_parameters: Parameters defined in the path level
        :type path_parameters: list
        :param app_security: list of security rules the application uses by default
        :type app_security: list
        :param security_definitions: `Security Definitions Object
            <https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#security-definitions-object>`_
        :type security_definitions: dict
        :param definitions: `Definitions Object
            <https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#definitionsObject>`_
        :type definitions: dict
        :param parameter_definitions: Global parameter definitions
        :type parameter_definitions: dict
        :param response_definitions: Global response definitions
        :type response_definitions: dict
        :param validate_responses: True enables validation. Validation errors generate HTTP 500 responses.
        :type validate_responses: bool
        :param strict_validation: True enables validation on invalid request parameters
        :type strict_validation: bool
        :param randomize_endpoint: number of random characters to append to operation name
        :type randomize_endpoint: integer
        :param validator_map: Custom validators for the types "parameter", "body" and "response".
        :type validator_map: dict
        :param pythonic_params: When True CamelCase parameters are converted to snake_case and an underscore is appended
        to any shadowed built-ins
        :type pythonic_params: bool
        :param uri_parser_class: class to use for uri parseing
        :type uri_parser_class: AbstractURIParser
        :param pass_context_arg_name: If not None will try to inject the request context to the function using this
        name.
        :type pass_context_arg_name: str|None
        """
        self.definitions = ...
        self.definitions_map = ...
    
    @classmethod
    def from_spec(cls, spec, api, path, method, resolver, *args, **kwargs):
        ...
    
    @property
    def parameters(self):
        ...
    
    @property
    def consumes(self):
        ...
    
    @property
    def produces(self):
        ...
    
    def get_path_parameter_types(self):
        ...
    
    def with_definitions(self, schema):
        ...
    
    def response_schema(self, status_code: Optional[Any] = ..., content_type: Optional[Any] = ...):
        ...
    
    def example_response(self, status_code: Optional[Any] = ..., *args, **kwargs):
        """
        Returns example response from spec
        """
        ...
    
    @property
    def body_schema(self):
        """
        The body schema definition for this operation.
        """
        ...
    
    @property
    def body_definition(self):
        """
        The body complete definition for this operation.

        **There can be one "body" parameter at most.**

        :rtype: dict
        """
        ...
    
    def _get_query_arguments(self, query, arguments, has_kwargs, sanitize):
        ...
    
    def _get_body_argument(self, body, arguments, has_kwargs, sanitize):
        ...
    
    def _get_val_from_param(self, value, query_defn):
        ...
    


