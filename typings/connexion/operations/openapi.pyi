"""
This type stub file was generated by pyright.
"""

import logging
from connexion.operations.abstract import AbstractOperation
from typing import Any, Optional

logger = logging.getLogger("connexion.operations.openapi3")
class OpenAPIOperation(AbstractOperation):
    """
    A single API operation on a path.
    """
    def __init__(self, api, method, path, operation, resolver, path_parameters: Optional[Any] = ..., app_security: Optional[Any] = ..., components: Optional[Any] = ..., validate_responses: bool = ..., strict_validation: bool = ..., randomize_endpoint: Optional[Any] = ..., validator_map: Optional[Any] = ..., pythonic_params: bool = ..., uri_parser_class: Optional[Any] = ..., pass_context_arg_name: Optional[Any] = ...):
        """
        This class uses the OperationID identify the module and function that will handle the operation

        From Swagger Specification:

        **OperationID**

        A friendly name for the operation. The id MUST be unique among all operations described in the API.
        Tools and libraries MAY use the operation id to uniquely identify an operation.

        :param method: HTTP method
        :type method: str
        :param path:
        :type path: str
        :param operation: swagger operation object
        :type operation: dict
        :param resolver: Callable that maps operationID to a function
        :param path_parameters: Parameters defined in the path level
        :type path_parameters: list
        :param app_security: list of security rules the application uses by default
        :type app_security: list
        :param components: `Components Object
            <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#componentsObject>`_
        :type components: dict
        :param validate_responses: True enables validation. Validation errors generate HTTP 500 responses.
        :type validate_responses: bool
        :param strict_validation: True enables validation on invalid request parameters
        :type strict_validation: bool
        :param randomize_endpoint: number of random characters to append to operation name
        :type randomize_endpoint: integer
        :param validator_map: Custom validators for the types "parameter", "body" and "response".
        :type validator_map: dict
        :param pythonic_params: When True CamelCase parameters are converted to snake_case and an underscore is appended
        to any shadowed built-ins
        :type pythonic_params: bool
        :param uri_parser_class: class to use for uri parseing
        :type uri_parser_class: AbstractURIParser
        :param pass_context_arg_name: If not None will try to inject the request context to the function using this
        name.
        :type pass_context_arg_name: str|None
        """
        self.components = ...
    
    @classmethod
    def from_spec(cls, spec, api, path, method, resolver, *args, **kwargs):
        ...
    
    @property
    def request_body(self):
        ...
    
    @property
    def parameters(self):
        ...
    
    @property
    def consumes(self):
        ...
    
    @property
    def produces(self):
        ...
    
    def with_definitions(self, schema):
        ...
    
    def response_schema(self, status_code: Optional[Any] = ..., content_type: Optional[Any] = ...):
        ...
    
    def example_response(self, status_code: Optional[Any] = ..., content_type: Optional[Any] = ...):
        """
        Returns example response from spec
        """
        ...
    
    def get_path_parameter_types(self):
        ...
    
    @property
    def body_schema(self):
        """
        The body schema definition for this operation.
        """
        ...
    
    @property
    def body_definition(self):
        """
        The body complete definition for this operation.

        **There can be one "body" parameter at most.**

        :rtype: dict
        """
        ...
    
    def _get_body_argument(self, body, arguments, has_kwargs, sanitize):
        ...
    
    def _get_typed_body_values(self, body_arg, body_props, additional_props):
        """
        Return a copy of the provided body_arg dictionary
        whose values will have the appropriate types
        as defined in the provided schemas.

        :type body_arg: type dict
        :type body_props: dict
        :type additional_props: dict|bool
        :rtype: dict
        """
        ...
    
    def _build_default_obj_recursive(self, _properties, res):
        """ takes disparate and nested default keys, and builds up a default object
        """
        ...
    
    def _get_default_obj(self, schema):
        ...
    
    def _get_query_defaults(self, query_defns):
        ...
    
    def _get_query_arguments(self, query, arguments, has_kwargs, sanitize):
        ...
    
    def _get_val_from_param(self, value, query_defn):
        ...
    


