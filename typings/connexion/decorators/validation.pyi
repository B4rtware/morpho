"""
This type stub file was generated by pyright.
"""

import logging
import pkg_resources
from ..utils import boolean
from typing import Any, Optional

_jsonschema_3_or_newer = pkg_resources.parse_version(pkg_resources.get_distribution("jsonschema").version) >= pkg_resources.parse_version("3.0.0")
logger = logging.getLogger('connexion.decorators.validation')
TYPE_MAP = { 'integer': int,'number': float,'boolean': boolean,'object': dict }
class TypeValidationError(Exception):
    def __init__(self, schema_type, parameter_type, parameter_name):
        """
        Exception raise when type validation fails

        :type schema_type: str
        :type parameter_type: str
        :type parameter_name: str
        :return:
        """
        self.schema_type = ...
        self.parameter_type = ...
        self.parameter_name = ...
    
    def __str__(self):
        ...
    


def coerce_type(param, value, parameter_type, parameter_name: Optional[Any] = ...):
    ...

def validate_parameter_list(request_params, spec_params):
    ...

class RequestBodyValidator(object):
    def __init__(self, schema, consumes, api, is_null_value_valid: bool = ..., validator: Optional[Any] = ..., strict_validation: bool = ...):
        """
        :param schema: The schema of the request body
        :param consumes: The list of content types the operation consumes
        :param is_null_value_valid: Flag to indicate if null is accepted as valid value.
        :param validator: Validator class that should be used to validate passed data
                          against API schema. Default is jsonschema.Draft4Validator.
        :type validator: jsonschema.IValidator
        :param strict_validation: Flag indicating if parameters not in spec are allowed
        """
        self.consumes = ...
        self.schema = ...
        self.has_default = ...
        self.is_null_value_valid = ...
        self.validator = ...
        self.api = ...
        self.strict_validation = ...
    
    def validate_formdata_parameter_list(self, request):
        ...
    
    def __call__(self, function):
        """
        :type function: types.FunctionType
        :rtype: types.FunctionType
        """
        ...
    
    def validate_schema(self, data, url):
        ...
    


class ResponseBodyValidator(object):
    def __init__(self, schema, validator: Optional[Any] = ...):
        """
        :param schema: The schema of the response body
        :param validator: Validator class that should be used to validate passed data
                          against API schema. Default is jsonschema.Draft4Validator.
        :type validator: jsonschema.IValidator
        """
        self.validator = ...
    
    def validate_schema(self, data, url):
        ...
    


class ParameterValidator(object):
    def __init__(self, parameters, api, strict_validation: bool = ...):
        """
        :param parameters: List of request parameter dictionaries
        :param api: api that the validator is attached to
        :param strict_validation: Flag indicating if parameters not in spec are allowed
        """
        self.parameters = ...
        self.api = ...
        self.strict_validation = ...
    
    @staticmethod
    def validate_parameter(parameter_type, value, param, param_name: Optional[Any] = ...):
        ...
    
    def validate_query_parameter_list(self, request):
        ...
    
    def validate_formdata_parameter_list(self, request):
        ...
    
    def validate_query_parameter(self, param, request):
        """
        Validate a single query parameter (request.args in Flask)

        :type param: dict
        :rtype: str
        """
        ...
    
    def validate_path_parameter(self, param, request):
        ...
    
    def validate_header_parameter(self, param, request):
        ...
    
    def validate_cookie_parameter(self, param, request):
        ...
    
    def validate_formdata_parameter(self, param_name, param, request):
        ...
    
    def __call__(self, function):
        """
        :type function: types.FunctionType
        :rtype: types.FunctionType
        """
        ...
    


