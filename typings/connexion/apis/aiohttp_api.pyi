"""
This type stub file was generated by pyright.
"""

import asyncio
import logging
import aiohttp_jinja2
from http import HTTPStatus
from aiohttp import web
from aiohttp.web_exceptions import HTTPNotFound
from connexion.apis.abstract import AbstractAPI
from typing import Any, Optional

logger = logging.getLogger('connexion.apis.aiohttp_api')
def _generic_problem(http_status: HTTPStatus, exc: Exception = ...):
    ...

@web.middleware
@asyncio.coroutine
def problems_middleware(request, handler):
    ...

class AioHttpApi(AbstractAPI):
    def __init__(self, *args, **kwargs):
        self.subapp = ...
    
    def _set_base_path(self, base_path):
        ...
    
    @staticmethod
    def normalize_string(string):
        ...
    
    def _base_path_for_prefix(self, request):
        """
        returns a modified basePath which includes the incoming request's
        path prefix.
        """
        ...
    
    def _spec_for_prefix(self, request):
        """
        returns a spec with a modified basePath / servers block
        which corresponds to the incoming request path.
        This is needed when behind a path-altering reverse proxy.
        """
        ...
    
    def add_openapi_json(self):
        """
        Adds openapi json to {base_path}/openapi.json
             (or {base_path}/swagger.json for swagger2)
        """
        ...
    
    def add_openapi_yaml(self):
        """
        Adds openapi json to {base_path}/openapi.json
             (or {base_path}/swagger.json for swagger2)
        """
        ...
    
    @asyncio.coroutine
    def _get_openapi_json(self, request):
        ...
    
    @asyncio.coroutine
    def _get_openapi_yaml(self, request):
        ...
    
    def add_swagger_ui(self):
        """
        Adds swagger ui to {base_path}/ui/
        """
        ...
    
    @aiohttp_jinja2.template('index.j2')
    @asyncio.coroutine
    def _get_swagger_ui_home(self, req):
        ...
    
    @asyncio.coroutine
    def _get_swagger_ui_config(self, req):
        ...
    
    def add_auth_on_not_found(self, security, security_definitions):
        """
        Adds a 404 error handler to authenticate and only expose the 404 status if the security validation pass.
        """
        ...
    
    def _add_operation_internal(self, method, path, operation):
        ...
    
    @classmethod
    @asyncio.coroutine
    def get_request(cls, req):
        """Convert aiohttp request to connexion

        :param req: instance of aiohttp.web.Request
        :return: connexion request instance
        :rtype: ConnexionRequest
        """
        ...
    
    @classmethod
    @asyncio.coroutine
    def get_response(cls, response, mimetype: Optional[Any] = ..., request: Optional[Any] = ...):
        """Get response.
        This method is used in the lifecycle decorators

        :type response: aiohttp.web.StreamResponse | (Any,) | (Any, int) | (Any, dict) | (Any, int, dict)
        :rtype: aiohttp.web.Response
        """
        ...
    
    @classmethod
    def _is_framework_response(cls, response):
        """ Return True if `response` is a framework response class """
        ...
    
    @classmethod
    def _framework_to_connexion_response(cls, response, mimetype):
        """ Cast framework response class to ConnexionResponse used for schema validation """
        ...
    
    @classmethod
    def _connexion_to_framework_response(cls, response, mimetype, extra_context: Optional[Any] = ...):
        """ Cast ConnexionResponse to framework response class """
        ...
    
    @classmethod
    def _build_response(cls, data, mimetype, content_type: Optional[Any] = ..., headers: Optional[Any] = ..., status_code: Optional[Any] = ..., extra_context: Optional[Any] = ...):
        ...
    
    @classmethod
    def _set_jsonifier(cls):
        ...
    


class _HttpNotFoundError(HTTPNotFound):
    def __init__(self):
        self.name = ...
        self.description = ...
        self.code = ...
        self.empty_body = ...
    


