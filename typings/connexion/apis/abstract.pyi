"""
This type stub file was generated by pyright.
"""

import abc
import logging
import pathlib
from typing import Any, Optional

MODULE_PATH = pathlib.Path(__file__).absolute().parent.parent
SWAGGER_UI_URL = 'ui'
logger = logging.getLogger('connexion.apis.abstract')
class AbstractAPIMeta(abc.ABCMeta):
    def __init__(cls, name, bases, attrs):
        ...
    


class AbstractAPI(metaclass=AbstractAPIMeta):
    """
    Defines an abstract interface for a Swagger API
    """
    def __init__(self, specification, base_path: Optional[Any] = ..., arguments: Optional[Any] = ..., validate_responses: bool = ..., strict_validation: bool = ..., resolver: Optional[Any] = ..., auth_all_paths: bool = ..., debug: bool = ..., resolver_error_handler: Optional[Any] = ..., validator_map: Optional[Any] = ..., pythonic_params: bool = ..., pass_context_arg_name: Optional[Any] = ..., options: Optional[Any] = ...):
        """
        :type specification: pathlib.Path | dict
        :type base_path: str | None
        :type arguments: dict | None
        :type validate_responses: bool
        :type strict_validation: bool
        :type auth_all_paths: bool
        :type debug: bool
        :param validator_map: Custom validators for the types "parameter", "body" and "response".
        :type validator_map: dict
        :param resolver: Callable that maps operationID to a function
        :param resolver_error_handler: If given, a callable that generates an
            Operation used for handling ResolveErrors
        :type resolver_error_handler: callable | None
        :param pythonic_params: When True CamelCase parameters are converted to snake_case and an underscore is appended
        to any shadowed built-ins
        :type pythonic_params: bool
        :param options: New style options dictionary.
        :type options: dict | None
        :param pass_context_arg_name: If not None URL request handling functions with an argument matching this name
        will be passed the framework's request context.
        :type pass_context_arg_name: str | None
        """
        self.debug = ...
        self.validator_map = ...
        self.resolver_error_handler = ...
        self.specification = ...
        self.options = ...
        self.resolver = ...
        self.validate_responses = ...
        self.strict_validation = ...
        self.pythonic_params = ...
        self.pass_context_arg_name = ...
    
    def _set_base_path(self, base_path: Optional[Any] = ...):
        ...
    
    @abc.abstractmethod
    def add_openapi_json(self):
        """
        Adds openapi spec to {base_path}/openapi.json
             (or {base_path}/swagger.json for swagger2)
        """
        ...
    
    @abc.abstractmethod
    def add_swagger_ui(self):
        """
        Adds swagger ui to {base_path}/ui/
        """
        ...
    
    @abc.abstractmethod
    def add_auth_on_not_found(self, security, security_definitions):
        """
        Adds a 404 error handler to authenticate and only expose the 404 status if the security validation pass.
        """
        ...
    
    def add_operation(self, path, method):
        """
        Adds one operation to the api.

        This method uses the OperationID identify the module and function that will handle the operation

        From Swagger Specification:

        **OperationID**

        A friendly name for the operation. The id MUST be unique among all operations described in the API.
        Tools and libraries MAY use the operation id to uniquely identify an operation.

        :type method: str
        :type path: str
        """
        ...
    
    @abc.abstractmethod
    def _add_operation_internal(self, method, path, operation):
        """
        Adds the operation according to the user framework in use.
        It will be used to register the operation on the user framework router.
        """
        ...
    
    def _add_resolver_error_handler(self, method, path, err):
        """
        Adds a handler for ResolverError for the given method and path.
        """
        ...
    
    def add_paths(self, paths: Optional[Any] = ...):
        """
        Adds the paths defined in the specification as endpoints

        :type paths: list
        """
        ...
    
    def _handle_add_operation_error(self, path, method, exc_info):
        ...
    
    @classmethod
    @abc.abstractmethod
    def get_request(self, *args, **kwargs):
        """
        This method converts the user framework request to a ConnexionRequest.
        """
        ...
    
    @classmethod
    @abc.abstractmethod
    def get_response(self, response, mimetype: Optional[Any] = ..., request: Optional[Any] = ...):
        """
        This method converts a handler response to a framework response.
        This method should just retrieve response from handler then call `cls._get_response`.
        It is mainly here to handle AioHttp async handler.
        :param response: A response to cast (tuple, framework response, etc).
        :param mimetype: The response mimetype.
        :type mimetype: Union[None, str]
        :param request: The request associated with this response (the user framework request).
        """
        ...
    
    @classmethod
    def _get_response(cls, response, mimetype: Optional[Any] = ..., extra_context: Optional[Any] = ...):
        """
        This method converts a handler response to a framework response.
        The response can be a ConnexionResponse, an operation handler, a framework response or a tuple.
        Other type than ConnexionResponse are handled by `cls._response_from_handler`
        :param response: A response to cast (tuple, framework response, etc).
        :param mimetype: The response mimetype.
        :type mimetype: Union[None, str]
        :param extra_context: dict of extra details, like url, to include in logs
        :type extra_context: Union[None, dict]
        """
        ...
    
    @classmethod
    def _response_from_handler(cls, response, mimetype, extra_context: Optional[Any] = ...):
        """
        Create a framework response from the operation handler data.
        An operation handler can return:
        - a framework response
        - a body (str / binary / dict / list), a response will be created
            with a status code 200 by default and empty headers.
        - a tuple of (body: str, status_code: int)
        - a tuple of (body: str, status_code: int, headers: dict)
        :param response: A response from an operation handler.
        :type response Union[Response, str, Tuple[str,], Tuple[str, int], Tuple[str, int, dict]]
        :param mimetype: The response mimetype.
        :type mimetype: str
        :param extra_context: dict of extra details, like url, to include in logs
        :type extra_context: Union[None, dict]
        :return A framework response.
        :rtype Response
        """
        ...
    
    @classmethod
    def get_connexion_response(cls, response, mimetype: Optional[Any] = ...):
        """ Cast framework dependent response to ConnexionResponse used for schema validation """
        ...
    
    @classmethod
    @abc.abstractmethod
    def _is_framework_response(cls, response):
        """ Return True if `response` is a framework response class """
        ...
    
    @classmethod
    @abc.abstractmethod
    def _framework_to_connexion_response(cls, response, mimetype):
        """ Cast framework response class to ConnexionResponse used for schema validation """
        ...
    
    @classmethod
    @abc.abstractmethod
    def _connexion_to_framework_response(cls, response, mimetype, extra_context: Optional[Any] = ...):
        """ Cast ConnexionResponse to framework response class """
        ...
    
    @classmethod
    @abc.abstractmethod
    def _build_response(cls, data, mimetype, content_type: Optional[Any] = ..., status_code: Optional[Any] = ..., headers: Optional[Any] = ..., extra_context: Optional[Any] = ...):
        """
        Create a framework response from the provided arguments.
        :param data: Body data.
        :param content_type: The response mimetype.
        :type content_type: str
        :param content_type: The response status code.
        :type status_code: int
        :param headers: The response status code.
        :type headers: Union[Iterable[Tuple[str, str]], Dict[str, str]]
        :param extra_context: dict of extra details, like url, to include in logs
        :type extra_context: Union[None, dict]
        :return A framework response.
        :rtype Response
        """
        ...
    
    @classmethod
    def _prepare_body_and_status_code(cls, data, mimetype, status_code: Optional[Any] = ..., extra_context: Optional[Any] = ...):
        ...
    
    @classmethod
    def _serialize_data(cls, data, mimetype):
        ...
    
    def json_loads(self, data):
        ...
    
    @classmethod
    def _set_jsonifier(cls):
        ...
    


