"""
This type stub file was generated by pyright.
"""

from jsonschema.exceptions import ValidationError
from werkzeug.exceptions import Forbidden, Unauthorized
from typing import Any, Optional

class ConnexionException(Exception):
    ...


class ProblemException(ConnexionException):
    def __init__(self, status=..., title: Optional[Any] = ..., detail: Optional[Any] = ..., type: Optional[Any] = ..., instance: Optional[Any] = ..., headers: Optional[Any] = ..., ext: Optional[Any] = ...):
        """
        This exception is holds arguments that are going to be passed to the
        `connexion.problem` function to generate a propert response.
        """
        self.status = ...
        self.title = ...
        self.detail = ...
        self.type = ...
        self.instance = ...
        self.headers = ...
        self.ext = ...
    
    def to_problem(self):
        ...
    


class ResolverError(LookupError):
    def __init__(self, reason=..., exc_info: Optional[Any] = ...):
        """
        :param reason: Reason why the resolver failed.
        :type reason: str
        :param exc_info: If specified, gives details of the original exception
            as returned by sys.exc_info()
        :type exc_info: tuple | None
        """
        self.reason = ...
        self.exc_info = ...
    
    def __str__(self):
        ...
    
    def __repr__(self):
        ...
    


class InvalidSpecification(ConnexionException, ValidationError):
    ...


class NonConformingResponse(ProblemException):
    def __init__(self, reason=..., message: Optional[Any] = ...):
        """
        :param reason: Reason why the response did not conform to the specification
        :type reason: str
        """
        self.reason = ...
        self.message = ...
    
    def __str__(self):
        ...
    
    def __repr__(self):
        ...
    


class AuthenticationProblem(ProblemException):
    def __init__(self, status, title, detail):
        ...
    


class ResolverProblem(ProblemException):
    def __init__(self, status, title, detail):
        ...
    


class BadRequestProblem(ProblemException):
    def __init__(self, title=..., detail: Optional[Any] = ...):
        ...
    


class UnsupportedMediaTypeProblem(ProblemException):
    def __init__(self, title=..., detail: Optional[Any] = ...):
        ...
    


class NonConformingResponseBody(NonConformingResponse):
    def __init__(self, message, reason=...):
        ...
    


class NonConformingResponseHeaders(NonConformingResponse):
    def __init__(self, message, reason=...):
        ...
    


class OAuthProblem(Unauthorized):
    ...


class OAuthResponseProblem(OAuthProblem):
    def __init__(self, token_response, **kwargs):
        self.token_response = ...
    


class OAuthScopeProblem(Forbidden):
    def __init__(self, token_scopes, required_scopes, **kwargs):
        self.required_scopes = ...
        self.token_scopes = ...
    


class ExtraParameterProblem(ProblemException):
    def __init__(self, formdata_parameters, query_parameters, title: Optional[Any] = ..., detail: Optional[Any] = ..., **kwargs):
        self.extra_formdata = ...
        self.extra_query = ...
    


