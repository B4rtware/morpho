"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional, Union

from doctrans_py_swagger_client.models.trace import Trace

from multiprocessing.pool import AsyncResult

"""
    Snippets API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class TracesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    def __init__(self, api_client: Optional[Any] = ...):
        self.api_client = ...

    def traces_create(self, body: Trace, async_req: bool=True) -> Union[None, Trace, AsyncResult[Trace]]:
        """traces_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Trace body: (required)
        :return: Trace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_create_with_http_info(self, body, **kwargs):
        """traces_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Trace body: (required)
        :return: Trace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_delete(self, id, **kwargs):
        """traces_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this trace. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_delete_with_http_info(self, id, **kwargs):
        """traces_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this trace. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_list(self, **kwargs):
        """traces_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Trace]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_list_with_http_info(self, **kwargs):
        """traces_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Trace]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_partial_update(self, body, id, **kwargs):
        """traces_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_partial_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Trace body: (required)
        :param int id: A unique integer value identifying this trace. (required)
        :return: Trace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_partial_update_with_http_info(self, body, id, **kwargs):
        """traces_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_partial_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Trace body: (required)
        :param int id: A unique integer value identifying this trace. (required)
        :return: Trace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_read(self, id, **kwargs):
        """traces_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this trace. (required)
        :return: Trace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_read_with_http_info(self, id, **kwargs):
        """traces_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this trace. (required)
        :return: Trace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_update(self, body, id, **kwargs):
        """traces_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Trace body: (required)
        :param int id: A unique integer value identifying this trace. (required)
        :return: Trace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def traces_update_with_http_info(self, body, id, **kwargs):
        """traces_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traces_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Trace body: (required)
        :param int id: A unique integer value identifying this trace. (required)
        :return: Trace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    


