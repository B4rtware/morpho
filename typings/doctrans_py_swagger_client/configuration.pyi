"""
This type stub file was generated by pyright.
"""

import six

"""
    Snippets API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class TypeWithDefault(type):
    def __init__(cls, name, bases, dct):
        ...
    
    def __call__(cls):
        ...
    
    def set_default(cls, default):
        ...
    


class Configuration(six.with_metaclass(TypeWithDefault, object)):
    """NOTE: This class is auto generated by the swagger code generator program.

    Ref: https://github.com/swagger-api/swagger-codegen
    Do not edit the class manually.
    """
    def __init__(self):
        """Constructor"""
        self.host = ...
        self.temp_folder_path = ...
        self.api_key = ...
        self.api_key_prefix = ...
        self.refresh_api_key_hook = ...
        self.username = ...
        self.password = ...
        self.logger = ...
        self.logger_format = ...
        self.logger_stream_handler = ...
        self.logger_file_handler = ...
        self.logger_file = ...
        self.debug = ...
        self.verify_ssl = ...
        self.ssl_ca_cert = ...
        self.cert_file = ...
        self.key_file = ...
        self.assert_hostname = ...
        self.connection_pool_maxsize = ...
        self.proxy = ...
        self.safe_chars_for_path_param = ...
    
    @property
    def logger_file(self):
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        ...
    
    @logger_file.setter
    def logger_file(self, value):
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        ...
    
    @property
    def debug(self):
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        ...
    
    @debug.setter
    def debug(self, value):
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        ...
    
    @property
    def logger_format(self):
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        ...
    
    @logger_format.setter
    def logger_format(self, value):
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        self.logger_formatter = ...
    
    def get_api_key_with_prefix(self, identifier):
        """Gets API key (with prefix if set).

        :param identifier: The identifier of apiKey.
        :return: The token for api key authentication.
        """
        ...
    
    def get_basic_auth_token(self):
        """Gets HTTP basic authentication header (string).

        :return: The token for basic HTTP authentication.
        """
        ...
    
    def auth_settings(self):
        """Gets Auth Settings dict for api client.

        :return: The Auth Settings information dict.
        """
        ...
    
    def to_debug_report(self):
        """Gets the essential information for debugging.

        :return: The report for debugging.
        """
        ...
    


