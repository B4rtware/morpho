"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""
    Snippets API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class Trace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    swagger_types = ...
    attribute_map = ...
    def __init__(self, id: Optional[Any] = ..., created: Optional[Any] = ..., service_name: Optional[Any] = ..., is_test: Optional[Any] = ..., name: Optional[Any] = ..., options: Optional[Any] = ...):
        """Trace - a model defined in Swagger"""
        self.discriminator = ...
        self.service_name = ...
    
    @property
    def id(self):
        """Gets the id of this Trace.  # noqa: E501


        :return: The id of this Trace.  # noqa: E501
        :rtype: int
        """
        ...
    
    @id.setter
    def id(self, id):
        """Sets the id of this Trace.


        :param id: The id of this Trace.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def created(self):
        """Gets the created of this Trace.  # noqa: E501


        :return: The created of this Trace.  # noqa: E501
        :rtype: datetime
        """
        ...
    
    @created.setter
    def created(self, created):
        """Sets the created of this Trace.


        :param created: The created of this Trace.  # noqa: E501
        :type: datetime
        """
        ...
    
    @property
    def service_name(self):
        """Gets the service_name of this Trace.  # noqa: E501


        :return: The service_name of this Trace.  # noqa: E501
        :rtype: str
        """
        ...
    
    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this Trace.


        :param service_name: The service_name of this Trace.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def is_test(self):
        """Gets the is_test of this Trace.  # noqa: E501


        :return: The is_test of this Trace.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this Trace.


        :param is_test: The is_test of this Trace.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def name(self):
        """Gets the name of this Trace.  # noqa: E501


        :return: The name of this Trace.  # noqa: E501
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, name):
        """Sets the name of this Trace.


        :param name: The name of this Trace.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def options(self):
        """Gets the options of this Trace.  # noqa: E501


        :return: The options of this Trace.  # noqa: E501
        :rtype: str
        """
        ...
    
    @options.setter
    def options(self, options):
        """Sets the options of this Trace.


        :param options: The options of this Trace.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self):
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self):
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self):
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other):
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        ...
    


